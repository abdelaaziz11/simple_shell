#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

/**
* _getenv - get the environment variable and the PATH of variable
* @name: name of the environment variable
* Return: string token or NULL if Failure
*/

char *_getenv(const char *name)
{
	char *token;
	int i = 0;

	if (name == NULL || environ == NULL)
	{
		return (NULL);
	}
	while (environ[i] != NULL)
	{
		token = strtok(environ[i], "=");
		if (strcmp(token, name) == 0)
		{
			return (strtok(NULL, "="));
		}
		i++;
	}
	return (NULL);
}

#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
/**
* _setenv - add environment variable or change environment variable
* @key: name of environment variable
* @value: value of environment variable
* @overwrite: overwrite and change environment variable
* Return: Always 0
*/
int _setenv(const char *key, const char *value, int overwrite)
{
	char *new_envar;
	int len = 0, i = 0;

	if (key == NULL || value == NULL)
		return (-1);
	while (environ[i])
	{
		len = strlen(key);
		if (strncmp(environ[i], key, len) == 0)
		{
			if (overwrite)
			{
				new_envar = malloc(strlen(key) + strlen(value) + 2);
				new_envar = strdup(key);
				strcat(new_envar, "=");
				strcat(new_envar, value);
				environ[i] = new_envar;
				return (0);
			}
		}
		i++;
	}
	new_envar = malloc(strlen(key) + strlen(value) + 2);
	new_envar = strdup(key);
	strcat(new_envar, "=");
	strcat(new_envar, value);
	environ[i] = new_envar;
	environ[i + 1] = NULL;
	return (0);
}

#include "main.h"
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>

/**
* _unsetenv - Delete environment variable
* @key: name of environment variable
* Return: 0 if success or -1 if failure
*/

int _unsetenv(const char *key)
{
	int i = 0, len = 0;

	if (!key)
		return (-1);
	while (environ[i])
	{
		len = strlen(key);
		if (strncmp(environ[i], key, len) == 0)
		{
		free(environ[i]);
			return (0);
		}
		i++;
	}
	free(environ[i]);
	return (0);
}

#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

/**
 * executeCommand - That execute commands
 * @av: array argument
 * @env: environment variable
 * Return: nothing
 */
void executeCommand(char **av, char **env)
{
	pid_t pid = fork();
	char *command;

	if (pid == 0)
	{
		command = get_cmd(av[0]);
		if (command)
		{
		execve(command, av, env);
		perror("Execution failed");
		exit(EXIT_FAILURE);
		}
		else
		{
			fprintf(stderr, "Command not found\n");
			exit(EXIT_FAILURE);
		}
	}
	else if (pid < 0)
	{
		perror("Fork failed");
	}
	else
	{
		wait(NULL);
	}
}

#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/stat.h>

/**
* get_cmd - get the command in the string
* @command: command of string
* Return: command or NULL if Failure
*/

char *get_cmd(char *command)
{
	struct stat st;
	char *Path = _getenv("PATH");
	char *command_full, *token;


	token = strtok(Path, ":");
	while (token)
	{
		command_full = malloc(strlen(command) + strlen(token) + 2);
		strcpy(command_full, token);
		strcat(command_full, "/");
		strcat(command_full, command);
		if (stat(command_full, &st) == 0)
			return (command_full);
		free(command_full);
		token = strtok(NULL, ":");
	}
	return (NULL);
}

#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

/**
* main - read and implement the functions
* @argc: argumant count
* @argv: pointer array of argument vector
* @env: environment
* Return: 0 if success or 1 if Failure
*/
int main(int argc, char **argv, char **env)
{
	char *buffer = NULL;
	size_t size_buffer;
	ssize_t number_char;
	char **commandArgs;
	(void)argc;
	(void)argv;

	while (1)
	{
		write(1, "$ ", 2);
		number_char = getline(&buffer, &size_buffer, stdin);
		if (number_char == EOF)
		{
			printf("\n");
			free(buffer);
			exit(EXIT_FAILURE);
		}
		commandArgs = str_split(buffer, " \t\n");
		if (buffer[0] == '#')
		{
			free(commandArgs);
			continue;
		}
		if (strcmp(commandArgs[0], "exit") == 0)
		{
			free(buffer);
			free(commandArgs);
			exit(EXIT_SUCCESS);
		}
		executeCommand(commandArgs, env);
		free(commandArgs);
	}
	free(buffer);
	return (0);
}

#ifndef MAIN_H
#define MAIN_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/stat.h>

#define MAX_INPUT_SIZE 1024

extern char **environ;

char *_getenv(const char *name);
char *get_cmd(char *command);
char **str_split(char *buffer, char *del);
int _setenv(const char *key, const char *value, int overwrite);
int _unsetenv(const char *key);
void executeCommand(char **av, char **env);

#endif /* MAIN_H */

#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

/**
* str_split - Spliting the strings
* @buffer: string
* @del: delimeter
* Return: number of characters
*/

char **str_split(char *buffer, char *del)
{
	char *token, **all_tokens;
	int i = 0;

	token = strtok(buffer, del);
	all_tokens = malloc(sizeof(char *) * 1024);
	while (token)
	{
		all_tokens[i] = token;
		token = strtok(NULL, del);
		i++;
	}
	all_tokens[i] = NULL;
	return (all_tokens);
}

